!function(){"use strict";angular.module("spring-security-csrf-token-interceptor",[]).factory("csrfInterceptor",["$injector","$q",function(a){var b=a.get("$q"),c=a.get("csrf"),d=c.init();return{request:function(a){return d.settings.httpTypes.indexOf(a.method.toUpperCase())>-1&&(a.headers[d.settings.csrfTokenHeader]=d.token),a||b.when(a)},responseError:function(c){var e,f=c.headers(d.settings.csrfTokenHeader);return 401===c.status&&d.numRetries<d.settings.maxRetries?(d.getTokenData(),e=a.get("$http"),d.numRetries=d.numRetries+1,e(c.config)):(f&&(d.token=f),b.reject(c))},response:function(a){return d.numRetries=0,a}}}]).factory("csrfService",[function(){var a={url:"/",csrfHttpType:"head",maxRetries:5,csrfTokenHeader:"X-CSRF-TOKEN",httpTypes:["GET","HEAD","PUT","POST","DELETE"]};return{inited:!1,settings:null,numRetries:0,token:"",init:function(b){this.settings=angular.extend({},a,b),this.getTokenData()},getTokenData:function(){var a=new XMLHttpRequest;a.open(this.settings.csrfHttpType,this.settings.url,!1),a.send(),this.token=a.getResponseHeader(this.settings.csrfTokenHeader),this.inited=!0}}}]).provider("csrf",[function(){var a=function(b){return{options:b,csrfService:null}};return{$get:["csrfService",function(b){var c=this;return{init:function(){return c.model=new a(c.options),c.model.csrfService=b,c.model.csrfService.init(c.model.options),c.model.csrfService}}}],model:null,options:{},config:function(a){this.options=a}}}]).config(["$httpProvider",function(a){a.interceptors.push("csrfInterceptor")}])}();
